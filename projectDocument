Version Control

بطور کلی وقتی شما در حال انجام کاری هستید (هر کاری میتواند باشد) و در طول زمان کار خود را جلو می برید، در زمان ممکن است چیزی اضافه کرده و یا کم کنید و در این پروسه اتفاقاتی رخ میدهد و هر جا به مرحله ای رسیدید که حس کردید مرحله ای از کار انجام شده و به سراغ قسمت های بعدی میروید، حال فرض کنید در وسط مراحل بعدی به دلایلی به نتیجه برسید که کارهای جدیدتان را در نظر نگرفته و به مرحله قبل از این تغییرات برگردیم، در اینجا چند راه حل داریم:

با فشردن متعدد دکمه های ctrl+z و لغو کردن تمام کار های انجام شده و رسیدن به مرحله مورد نظر.
بعد از انجام دادن هر مرحله، آن جایی که به نقطه ای که رسیدیم که بگوییم کارمان با آن مرحله تمام شده، از تمام فایل هایمان یک کپی بگیریم و به عنوان یک ورژن از کد ذخیره کنیم که در صورت نیاز بتوانیم به آن مراجعه کنیم.
در تمام روش های بالا مشکلی وجود دارد، در روش اول تعداد دفعاتی که میتوانیم به عقب برگردیم محدود هستن و با خاموش کردن کامپیوتر نیز دیگر امکان برگشت وجود ندارد و در روش دوم اینکه هر بار بخواهیم قسمت هایی که دست نخورده اند را باز کپی کنیم باعث میشوند که فضای زیادی را برای ذخیره قسمت های تکراری هدر بدهیم، ضمن اینکه مدیریت این ورژن ها هم خود دردسری خواهد بود.

در اینجا ما به ابزاری نیاز داریم که بتواند مشکلات بالا را برای ما حل کند و حتی قابلیت های اضافه تری را برای ما تدارک ببیند، بدین منظور ابزار هایی مانند git و ... معرفی شدند که به آن ها Version Control میگوییم که در کنار زیر نظر داشتن تغییرات کارها، امکان کار همزمان تیمی را نیز به خوبی فراهم میکند.

در این جا قصد داریم یک ورژن کنترل که بتواند حداقل کار های لازم را برای ما انجام دهد را پیاده سازی نماییم، دستورات مورد نظر ما عبارت اند از:

init
status
select [fileName]
unselect [fileName]
commit [commitDescription]
log
reset [commitId]
stash [commitId]
جزئیات هر یک از دستورات به شرح زیر است:

init

با زدن این دستور برنامه شما می بایست فولدری که اکنون در آن قرار داریم را تحت کنترل خود گرفته و در صورت نیاز فایل های مورد نظر خود را در آن درست کند، برای درست کردن فایل ها هم آن را در یک فولدر جدا درست کنید که با بقیه آیتم ها قاطی نشود، اسم فولدر را میتوانید به طور دلخواه مشخص کنید.

status

با زدن این دستور تمام فایل ها را دسته بندی های "تغییر یافته"، "جدیدا ساخته شده" و "پاک شده" نشان میدهد و فایل های تغییر نیافته هم لازم به نشان دادن چیزی نیست و اگر در کل چیزی تغییر نیافته بود با دادن خروجی که تغییری رخ نداده کاربر را آگاه میکنیم.

همچنین در صورتی که فایل هایی select شده باشند، لیست آن ها نیز در ادامه نمایش داده شوند، در ادامه هم میتوانید جزئیاتی که بنظر خودتان نیز مهم میرسد نشان دهید.

select [fileName]

چون ما در محیط commad line هستیم و امکان کار با موس و انتخاب فایل ها را نداریم، با استفاده از این دستور فایل های مد نظر برای کامیت کردن را انتخاب میکنیم.

همچنین با استفاده از سوییچ all- بصورت select -all میبایست بتوانیم تمام فایل های موجود در فولدر را برای کامیت انتخاب کنیم.

unselect [fileName]

حال اگر بخواهیم تعدادی از فایل هایی که انتخاب کردیم را از حالت انتخاب خارج کنیم از این دستور استفاده میکنیم که با دادن اسم فایل هایی که آن ها را انتخاب کردیم، آن ها را از حالت انتخاب در می آورد.

همچین مشابه بالا، با استفاده از سوییچ all- بصورت unselect -all میبایست بتوانیم تمامی فایل هایی که انتخاب کردیم را از حالت انتخاب خارج کنیم.

commit [commitDescription]

در اینجا از تمام فایل هایی که select شده نسخه برداری انجام میدهیم، بدین صورت که هر کامیت id منحصر به فرد خود را خواهد داشت و این آیدی ها بصورت عدد صحیح هستند که از ابتدا از عدد 1 شروع میشوند و با ادامه کامیت ها ادامه می یابند.

ضمن اینکه میتوان در ادامه ی دستور کامیت توضیحات مربوط به آن کامیت را در قالب یک جمله نوشت، پیاده سازی باید به گونه انجام شود که امکان کامیت کردن بدون توضیحات به کاربر داده نشود.

log

با استفاده از این دستور لیست تمامی کامیت ها از ابتدا تا کنون را همراه با تمام جزئیات مربوطه مانند id کامیت ها و توضیحات آن ها و ... نشان داده میشود.

reset [commitId]

در این دستور با وارد کردن id کامیت میبایست تمامی فایل های دقیقا به همان صورتی که در آن کامیت بودند برگردانده شودند، مثلا اگر فایل هایی را پاک کرده ایم که در آن کامیت بوده اند باید وقتی به آن کامیت میرویم موجود باشند و یا حتی اگر فایلی را جدیدا ساخته ایم که زمان آن کامیت وجود نداشته بود نباید آن فایل را ببینیم و تمامی تغییرات نیز باید برگشته باشند.

stash [commitId]

در این دستور نیز همانند rest باید بتوانیم باید به id کامیتی که داده شده بریم، سپس با نوشتن دستور stash pop دوباره دقیقا به همان وضعیتی برگردیم که قبل از stash در آن بودیم، در نظر داشته باشید که به ازاء هر بار stash کردن فقط یکبار میتوانیم عمل pop را انجام دهیم.

در صورت وارد نکردن commitId، آخرین کمیت در نظر گرفته شود.

فرق stash با reset نحوه برخورد با تغییراتی هست که آن ها را کامیت نکردیم، اگر از stash استفاده کنیم و با استفاده از stash pop دقیقا به همان مرحله، با تمام تغییرات کامیت نشده بر میگردیم ولی در صورت استفاده از rest از آن جا که پارامتر rest فقط id کامیت ها هستند تغییرات کامیت نشده خود را از دست میدهیم.

نکات پیاده سازی را میتوانید در اینجا مشاهده کنید.

نمره دهی:

60% برای پیاده سازی کامل موارد خواسته شده و کارکرد صحیح برنامه
40% کاربر پسندی برنامه و کیفیت کد با توجه با موارد ذکر شده در ادامه
نکات کلی:

پروژه بصورت تک نفره هست و باید توسط خودتان انجام شوند.

تمام کد ها باید با استاندارد C و در فایل c. و h. نوشته شده باشند و از کد زدن در استاندارد Cpp و فایل های cpp. خودداری کنید یا از درصدی از نمره کل پروژه صرف نظر کنید.

برای کف پروژه لازم به دنبال کردن کردن چند فایل نیست و فقط یک فایل کفایت میکند، ولی باید اصول گفته شده در بالا باید در آن رعایت شده باشد.

برای پیاده سازی میتوانید از تمام ابزار های وجود برای C استفاده کنید ولی هسته اصلی version control باید توسط شما پیدا سازی شده باشد و به آن مسلط باشید.

برای بونس هم میتوانید به دلخواه خود مواردی که بنظرتان کاربردی هستند انتخاب کرده و آن ها را پیدا سازی کنید، نمرات بونس به صورت نسبی هستند، در زیر چند مورد مثال برای موارد بونس برای شما مثال زده شده.

موارد پیشنهادی برای بونس:

محدویت دنبال کردن یک فایل را بردارید!
🥈 برای قسمت اول باید امکان دنبال کردن همزمان چند فایل، با اطمینان آن که در فولدری که تحت کنترل داریم فولدر زیرمجموعه ای وجود نخواهد داشت را اضافه کنید. (با رسیدن به این مرحله بدونید یه چیز خوب و کاربردی نوشتین)

🥇 برای قسمت دوم علاوه بر امکان دنبال کردن چند فایل، فولدر های زیر مجموعه و زیرمجوعه های آنان در فولدری که تحت نظر داریم را نیز اضافه کنید. (با رسیدن به این مرحله میتونید توی دنیای واقعی از برنامتون استفاده کنید و حتی اون رو برای استفاده کردن به بقیه پیشنهاد بدین!)

اضافه کردن فایلی مانند gitignore. که بتوانیم با نوشتن اسم فایل هایی که نمیخواهیم آن را دنبال کنیم، برنامه دیگر آن ها را دنبال نکند.

رنگی کردن محیط برنامه
